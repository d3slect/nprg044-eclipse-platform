#summary Views and editors

=Views=
<wiki:toc max_depth="1" />

= Eclipse GUI basics =
Workbench part

TODO picture:
IAdaptable
 |- IWorkbenchPart
   |- IViewPart 
   |- IEditorPart

IWorkbenchPart
 * `void createPartControl(Composite parent)`
 * `IWorkbenchPartSite getSite()`
 * `String getTitle()`
 * `Image getTitleImage()`
 * `void setFocus()` - Asks this part to take focus within the workbench. Parts must assign focus to one of the controls contained in the part's parent composite. It is called by workbench

IViewPart:
 * `void init(IViewSite site)` - Initializes this view with the given view site.

`IWorkbenchPartSite` - The primary interface between a workbench part and the workbench.
IViewSite

= SWT and JFace =
== SWT ==
SWT is a widget toolkit providing API built on top of native OS GUI platform. It is part of Eclipse platform, but you can use it in standalone applications. It is event driven.

Class `Display` - The `Display` represents the connection between SWT and the underlying platform's GUI system. Displays are primarily used to manage the platform event loop and control communication between the UI thread and other threads. You must create a display before creating any windows, and you must dispose of the display when your shell is closed. This is typically done by Eclipse workbench. 

Class `Shell` is a _window_ managed by the OS platform window manager. Top level shells are those that are created as a child of the display. These windows are the windows that users move, resize, minimize, and maximize while using the application. Secondary shells are those that are created as a child of another shell. These windows are typically used as dialog windows or other transient windows that only exist in the context of another window (so called _composite widgets_).

Class `Widget` represents a handle to OS resource. Needs to be disposed explicitely!

Class `SWT` - contains definition of style bits. E.g., SWT.YES, SWT.NO, SWT.VERTICAL, SWT.BORDER. Intepretation depends on control (e.g., SWT.SINGLE - single selection, single line)

  ||Note: _SWT requires that the user has to explicitelly free any OS resources which were allocated. In SWT, `Widget.dispose()` method is used for freeying resources associated with a widget. There are several simple rules:
  * if the user creates a widget using constructor, it has to also dispose it.
  * When `Composite` widget is diposed, also its children are recursively disposed.
  * If the user gets a widget without using ctor, he/she cannot dispose it.
  * If the user passes a reference of widget, he/she cannot dispose it until the widget is still in use.
  * 
  _ ||

=== SWT Controls ===
 |- Widget 
  |- Control
Label, Tree, Text, List, Button, Canvas - see [http://help.eclipse.org/helios/index.jsp?topic=/org.eclipse.platform.doc.isv/guide/swt.htm Eclipse Help SWT] for the full list.
You can fully control these widgets - configure fonts, colors, dimension.

====SWT Layouts ====

=== SWT Events ===
SWT is event driven. 

=== SWT Custom Widgets ===

=== Example TODO name ===

== JFace ==

 * method `getControl()` to access SWT control

= Views =
A view is class implementing `IViewPart` interface. It is beneficial to start with inheriting from `ViewPart` class
implementing basic infrastructure. 
 
Important points:
 * method `createControlPart()` - create a graphical widget showed by a view. For example, table, tree, graph visualizator.
 * method `setInput()`
 * method content provider
 * label provider
 * actions hooks

== Content Provider ==
 * online
 * lazy

 * JOBS - loading on via job async load

== Label Provider ==

== Adapters ==

== Actions in Views ==

 - via IViewProvider
 - or via Commands/Actions

Interface `IAdaptable`

||Note: _Concept of adapters is much more powerfull and is used through whole Eclipse platform._||
== Example: `cz.cuni.mff.d3s.twitter.ui.views`==
  || Note: _Naming convenction - see part `ui`._||

Create a view showing messages (so called _timeline_) of a given user:
  * import into a workspace plug-in `cz.cuni.mff.d3s.twitter.api`
  * create a new plug-in `cz.cuni.mff.d3s.twitter.ui.views`
  * configure `plugin.xml`:
    * add a dependency on plug-in `cz.cuni.mff.d3s.twitter.api`
    * add dependencies on plug-ins `org.eclipse.ui` and `org.eclipse.core.runtime`
    * define extension points:
      * `org.eclipse.ui.views`:
        * add a new category _Twitter Category_ 
          * category will be shown in menu _Window > Show Views > Others..._
        * add a new view
          * define ID, name, category (to Twitter category), icon
            * fastViewWidthRatio = 0.3 (one third of workbench width)
            * allowMultiple = true (we will allow showing timelines of various users)
          * define `class` attribute to `cz.cuni.mff.d3s.twitter.ui.views.TwitterMessageTimelineView`
    * implements the class (inherits from the `ViewPart` class)
      * method `createPartControl(Composite parent)
        * create GridLayout, pass it to `parent.setLayout()`
        * create `Text` control `searchBox` with flags SWT.SINGLE | SWT.SEARCH | SWT.ICON_SEARCH
         * setup layout data - new GridData(GridData.FILL_HORIZONTAL)
        * create `TableViewer` control `viewer` with flags SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER
         * setup layout data new GridData(GridData.FILL_BOTH)
           * you have to call viewer.getControl() to access underlying SWT control (TableViewer is JFace widget)
         * setup input to `viewer.setInput(getViewSite())`
      * SWT.VIRTUAL - content provider `ILazyContentProvider` instead of `IStructureContentProvider`
    * try to run in debug mode without configuring content provider
    * implements content provider `MessageTimelineContentProvider` inheriting `IStructureContentProvider`
       * setup content provider during debugging the application



= Links =
 * Eclipse help - JFace - http://help.eclipse.org/helios/index.jsp?topic=/org.eclipse.platform.doc.isv/guide/jface.htm
 * Eclipse help - SWT - http://help.eclipse.org/helios/index.jsp?topic=/org.eclipse.platform.doc.isv/guide/swt.htm 
 * SWT: Standard Widget Toolkit - http://www.eclipse.org/resources/resource.php?id=241
 * Understanding Layouts in SWT - http://www.eclipse.org/articles/article.php?file=Article-Understanding-Layouts/index.html
