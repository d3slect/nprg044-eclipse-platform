#summary Introduction to Eclipse platform

= Tutorial #2: Eclipse basics =
<wiki:toc max_depth="3" />

== Plan ==
The plan is to shows basics of Eclipse RCP development on a simple example of Twitter client. 
 
== Basic concepts of Eclipse Workbench ==

=== Eclipse ===
Eclipse IDE is a Java application running on the top of extended OSGi Equinox runtime. It is composed of OSGi bundles called Eclipse plugins.

Launch of Eclipse is provided by a binary launcher which detects a provided Java platform and launch Eclipse Java application:
Parameters of Eclipse Java application are stored in file `eclipse.ini`:
{{{
-startup plugins/org.eclipse.equinox.launcher_1.1.1.R36x_v20101122_1400.jar
--launcher.library plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1.1.2.R36x_v20101019_1345
-product org.eclipse.epp.package.cpp.product
--launcher.defaultAction openFile
-showsplash org.eclipse.platform
--launcher.XXMaxPermSize 256m
--launcher.defaultAction openFile
-vmargs -Dosgi.requiredJavaVersion=1.5 -XX:MaxPermSize=256m -Xms40m -Xmx384m
}}}

Other useful arguments are (see also [http://help.eclipse.org/helios/index.jsp?topic=/org.eclipse.platform.doc.user/tasks/running_eclipse.htm Running Eclipse help page]):
  * `-consoleLog` : shows a messages from Eclipse Java application
  * `-clean` : clean cached data, bundles, services information

  Note: _Sometimes it is recommended to increase the parameter XX:MaxPermSize._

====Eclipse installation===
Important files and directories
{{{
eclipse/
 |-configuration/
  * config.ini
 |-features/
 |-plugins/
 * artifacts.xml
 * eclipse
 * eclipse.ini
}}}

====Eclipse platform design====
  * runtime Equinox OSGi
  * SWT+JFace+...
  * Plug-ins
  * TODO obrazek

===Workspace===
It is a core working area (i.e., directory) where your instance of Eclipse is running. It can be changed. It contains a set of various projects.

===Projects===
Project is a directory containing _.project_ file describing project's metadata (name, dependencies, builders). The project's directory can be part of workspace directory or just linked to a workspace (typically used when the project is a part of SVN/HG repository).

===Perspective===
Eclipse IDE provides multiple views on the workspace, called _perspective_. The perspective defines which project will be shown, how the workbench will be configured (layout of _views_, _editors_, _menus_, toolbars and their items). 

===Menus and toolbars===

===Views===

===Editors===


=== Plug-in ===
Eclipse plug-in is an OSGi bundle with additional meta-information stored in plugin.xml (e.g., extension points definition). It also add new MANIFEST.MF headers (e.g., `Eclipse-BundleShape`).

====Project structure====
{{{
simple-eclipse-plugin\
  |-src
  |-lib
  |-META-INF
    * MANIFEST.MF
  * plugin.xml
}}}

====Extension point====

 * updatable from update-sites
  * creating run configuration
  * project

====Features====
A set of plug-ins.
-----

== Plug-in project from existing JAR ==
  Goal: _Create an Eclipse plug-in from existing JAR_

Why?
If you need to bundle 3rd party library as a OSGi/Eclipse bundle

How?
 * unpack `twitter4j-2.2.1.zip`
   * can be downloaded from http://twitter4j.org/
 * create new plug-in project
   * menu _New > Project > Plug-in from existing JAR_:
    # select JAR `twitter4j-core-2.2.1.jar`
    # fill name project, name plug-in, plug-in ID (must be unique), uncheck option 'Unzip JAR archives into project'
 * wizard will create a new project and setup its MANIFEST.MF
 * revisit MANIFEST.MF
   * tab: hide internal/implementation packages (*internal*)
     * _good practice_ is to publish only API packages
 
   Note: _If you change project build-path or MANIFEST.MF , they can be resynchronized. In such case, you can open MANIFEST.MF, and on the first tab click on 'Update build path...'
 
-----

== Simple plug-in project==
  Goal: _Create a simple plug-in with activator and log a message from activator. Launch the plugin and _

 * Create new plugin-project
  * menu _New > Project > Plug-in Project_:
    # fill name of project: `cz.cuni.mff.d3s.nprg044.twitter.api.test`
    # fill 
      * plug-in ID (should be unique): `cz.cuni.mff.d3s.nprg044.twitter.api.test`, 
      * plug-in name: `Twitter API test`
      * enable _Generate an activator_ check box
      * rename `Activator` class to `TwitterTestActivator`
        * Activator is a class handling plug-in life-cycle (start/stop)
          * it is created when plug-in's class is required
          * it is possible to specify an excptions via `exclude/include` directive in `MANIFEST.MF`
            * see [http://wiki.eclipse.org/Lazy_Start_Bundles Bundle Activation]
 * Edit MANIFEST.MF and put plug-in `cz.cuni.mff.d3s.nprg044.twitter.api` to Dependencies
 * Edit code of `TwitterTestActivator` and put `System.out.println` calls into constructor, start and stop methods.
   * Hint: start typing `sys` and then press _Ctrl+space_, the template dialog will be shown and you can select demanded option (e.g., `System.out.println`)
 * Append method showUserStatus() 
{{{
protected void showUserStatus(String username) {
		try {
            Twitter twitter = new TwitterFactory().getInstance();
            User user = twitter.showUser(username);
            if (null != user.getStatus()) {
                System.out.println("@" + user.getScreenName() + " - " + user.getStatus().getText());
            } else {
                // the user is protected
                System.out.println("@" + user.getScreenName());
            }            
        } catch (TwitterException te) {
            te.printStackTrace();
        }		
}
}}}



===Run the plug-in===
To run the plug-in, it is necessary to create a _Run configuration_ providing declaring an environment to execute the plug-in (recall - Eclipse plug-in is an OSGi bundle which needs OSGi framework to run).

====Run configuration====
TODO

====Create launch configuration====
 * Toolbar > launch configurations
 * Create a new _Eclipse application_ run configuration:
  # tab - a new Eclipse instance workspace location 
  # tab - VM arguments
  # tab - plugins which will be deployed into a new Eclipse (so called _target platform_):
    * default configuration is OK, but you can specify your own Eclipse configuration:
      * Select _Plug-ins selected below only_
      * Click on _Deselect all_
      * Select only `cz.cuni.mff.d3s.nprg044.twitter.api.test`
      * Click on _Add required plug-ins only_
        * only your plug-in and its dependencies will create a _target platform_ of new Eclipse
     
===Debugging===

----

== Commands ==

  Note: _Commands and handlers represents new approach replacing old approach of actions._

== Menu contribution ==


== Useful Hints ===
It is useful to learn basic shortcuts to speed up Eclipse development:
  * Open type - _Ctrl+Shift+T_
  * Open resource - _Ctrl+Shift+R_
  * Show inheritance tree of selected element - _Ctrl+T_
  * Quick fix (on line marked by error/warning) - _Ctrl+1_
  * Maximize editor - _Ctrl+M_
  * Goto line - _Ctrl+L_
  * Plug-in spy - shows more information about selected element (ID, implementation class) - _Alt+Shift+F1_

Useful views:
  * Plug-in registry view - shows deployed plugins, their state, dependencies, allows to start/stop a plugin.



== Recommended reading & links ==

  * Lars Vogel: _Eclipse IDE  Tutorial_, http://www.vogella.de/articles/Eclipse/article.html
  * Lars Vogel: _Eclipse Shortcuts_, http://www.vogella.de/articles/EclipseShortcuts/article.html
  * Eclipse Wiki: Menu contributions (location URI),  http://wiki.eclipse.org/Menu_Contributions